<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">

	<!-- Student 클래스의 bean -->
	<bean id="student" class="com.tjoeun.springAOP_xml.Student">
		<constructor-arg value="뽀로로" />
		<constructor-arg value="10" />
		<constructor-arg value="3" />
		<constructor-arg value="10" />
	</bean>

	<!-- Worker 클래스의 bean -->
	<bean id="worker" class="com.tjoeun.springAOP_xml.Worker">
		<property name="name" value="루피" />
		<property name="age" value="12" />
		<property name="job" value="나무꾼" />
	</bean>
	
	<!-- AopTest 클래스의 bean -->
	<bean id="aopTest" class="aopTest.AopTest" />
	
	<!-- 
		xml 파일로 AOP 설정시 사전 준비 사항
		1. pom.xml 파일에 maven repository에서 aspectjweaver 의존성을 추가한다.
		2. bean을 설정하는 xml 파일에 aop Namespace를 추가한다.
			-> <beans> 태그에 xmlns:aop="http://www.springframework.org/schema/aop"가 추가된다.
		3. 공통 기능 메소드를 모아놓은 클래스의 bean을 생성한다.
	 -->	
	<!-- 공통 기능 메소드가 작성된 LogAOP 클래스의 bean -->
	<bean id="logAop" class="com.tjoeun.springAOP_xml.LogAOP" />
	
	<!-- <aop:config> 태그 내부에서 AOP 환경을 설정한다. -->
	<aop:config> <!-- AOP 환경 설정 시작 -> AOP 전체 -->
	
	<!-- 
		<aop:aspect> 태그로 공통 기능 메소드가 작성된 클래스의 bean과 연결한다.
		실행할 공통 기능 메소드가 작성된 클래스의 bean을 지정하고 pointcut을 설정한다. 	
		id 속성은 공통 기능 메소드가 작성된 bean을 식별한다. -> 식별이 목적이므로 뭐를 적어도 상관없다.
		ref 속성은 공통 기능 메소드가 작성된 bean과 연결한다. 참조한다.
		
	 -->
		 <aop:aspect id="logger" ref="logAop"> <!-- AOP 설정 시작 -> 공통 기능 메소드가 작성된 클래스 단위 -->
	 
	 	<!-- 
	 		<aop:pointcut> 태그로 pointcut(공통 기능이 실행될 위치)을 설정한다.
	 		expression 속성은 within() 또는 execution()을 사용해서 pointcut을 지정한다.
	 			-> within()은 클래스 단위로 pointcut을 지정한다.
	 			-> execution()은 메소드 단위로 pointcut을 지정한다.
	 		id 속성은 pointcut을 식별한다. -> 식별이 목적이므로 뭐를 적어도 상관없다.
	 		
	 		within(*) : 프로젝트의 모든 패키지의 모든 클래스의 모든 메소드에 공통 기능을 적용한다.
	 		within(aopTest.*) : aopTest 패키지의 모든 클래스의 모든 메소드에 공통 기능을 적용한다.
	 		within(com.tjoeun.springAOP_xml.*) : com.tjoeun.springAOP_xml 패키지의
	 										 모든 클래스의 모든 메소드에 공통 기능을 적용한다.
	 		within(com.tjoeun.springAOP_xml.Worker) : com.tjoeun.springAOP_xml 패키지의
	 										 Worker 클래스의 모든 메소드에 공통 기능을 적용한다.
	 		within(com.tjoeun.springAOP_xml.Student) : com.tjoeun.springAOP_xml 패키지의
	 										 Student 클래스의 모든 메소드에 공통 기능을 적용한다.
	 		within(com.tjoeun.springAOP_xml.S*) : com.tjoeun.springAOP_xml 패키지의
	 										 S로 시작하는 모든 클래스의 모든 메소드에 공통 기능을 적용한다.
	 				->'d*': d로 시작하는, '*d' : d로 끝나는, '*d*' : d를 포함하는
	 				
	 		execution()은 ()안에 "*"을 먼저 입력한 후 1칸 띄운 후 pointcut을 지정한다.
	 		execution(* *.*()) : 프로젝트의 모든 패키지의 모든 클래스의 모든 메소드에 공통 기능을 적용한다.
	 		execution(* aopTest.*.*()) : aopTest 패키지의 모든 클래스의 모든 메소드에 공통 기능을 적용한다.
	 		execution(* com.tjoeun.springAOP_xml.*.*()) : com.tjoeun.springAOP_xml 패키지의
	 										 모든 클래스의 모든 메소드에 공통 기능을 적용한다.
	 		execution(* com.tjoeun.springAOP_xml.Student.*()) : com.tjoeun.springAOP_xml 패키지의
	 										 Student 클래스의 모든 메소드에 공통 기능을 적용한다.
	 		execution(* com.tjoeun.springAOP_xml.Worker.*()) : com.tjoeun.springAOP_xml 패키지의
	 										 Worker 클래스의 모든 메소드에 공통 기능을 적용한다.
	 		execution(* com.tjoeun.springAOP_xml.S*.*()) : com.tjoeun.springAOP_xml 패키지의
	 										 S로 시작하는 모든 클래스의 모든 메소드에 공통 기능을 적용한다.
	 		
	 		execution(* com.tjoeun.springAOP_xml.S*.getStudentInfo()) : com.tjoeun.springAOP_xml 패키지의
	 										 S로 시작하는 모든 클래스의 getStudentInfo() 메소드에만 공통 기능을 적용한다.
	 		execution(* com.tjoeun.springAOP_xml.S*.g*()) : com.tjoeun.springAOP_xml 패키지의
	 										 S로 시작하는 모든 클래스의 g로 시작하는 메소드에만 공통 기능을 적용한다.
	 		execution(* com.tjoeun.springAOP_xml.*.g*()) : com.tjoeun.springAOP_xml 패키지의
	 										  			모든 클래스의 g로 시작하는 메소드에만 공통 기능을 적용한다.
	 	 	
	 	 	
	 	 -->
	 		<aop:pointcut expression="within(*)" id="beforeMethod"/>
	 		<aop:pointcut expression="within(com.tjoeun.springAOP_xml.*)" id="afterReturningMethod"/>
	 		<aop:pointcut expression="within(com.tjoeun.springAOP_xml.Student)" id="afterThrowingMethod"/>
	 		<aop:pointcut expression="execution(* com.tjoeun.springAOP_xml.S*.*())" id="afterMethod"/>
	 		<aop:pointcut expression="execution(* com.tjoeun.springAOP_xml.*.g*())" id="aroundMethod"/>
	 		
	 	
	 	
	 	<!-- 
	 		설정된 pointcut에 따라 공통 기능을 실행한다.
	 		<aop:before> : 핵심 기능 실행 전
	 		<aop:after-returning> : 핵심 기능 정상 종료된 후
	 		<aop:after-throwing> : 핵심 기능을 실행하다 exception이 발생된 후
	 		<aop:after> : 핵심 기능 실행시 exception 발생 여부와 상관없이
	 		<aop:around> : 핵심 기능 실행 전과 후
	 		
	 		method 속성에는 <aop:aspect> 태그에서 참조시킨 클래스의 실행할 메소드 이름을 지정한다.
	 		메소드 이름 뒤에 ()는 생략한다.
	 		pointcut-ref 속성에는 공통 기능을 실행할 pointcut의 id 속성을 참조시킨다.
	 	 -->
	 		<aop:before method="before" pointcut-ref="beforeMethod"/> <!-- LogAOP클래스의 before 메소드 실행 -->
	 		<aop:after-returning method="afterReturning" pointcut-ref="afterReturningMethod"/>
	 		<aop:after-throwing method="afterThrowing" pointcut-ref="afterThrowingMethod"/>
	 		<aop:after method="after" pointcut-ref="afterMethod"/>
	 		<aop:around method="around" pointcut-ref="aroundMethod"/>
	 		
		 </aop:aspect>
	
	</aop:config> <!-- AOP 환경 설정 끝 -->
	
</beans>
